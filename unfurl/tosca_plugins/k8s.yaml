# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0

imports:
  - repository: unfurl
    file: tosca_plugins/artifacts.yaml

topology_template:
  node_templates:
    kube-artifacts:
      type: unfurl.nodes.LocalRepository
      directives:
        - default # we need this so that this node template is imported
      artifacts:
        kubectl:
          type: artifact.AsdfTool
          file: kubectl
          properties:
            version: 1.25.3

node_types:
  unfurl.nodes._K8sResourceHost:
    derived_from: tosca.nodes.Root

  unfurl.nodes.K8sCluster:
    derived_from: unfurl.nodes._K8sResourceHost
    properties:
      name:
        title: Cluster name
        type: string
        required: false
    capabilities:
      host:
        type: tosca.capabilities.Container
        valid_source_types:
          [unfurl.nodes.K8sRawResource, unfurl.nodes.K8sNamespace]
      endpoint:
        type: unfurl.capabilities.Endpoint.K8sCluster
    attributes:
      api_server:
        description: The address and port of the cluster's API server
        type: string
        metadata:
          # mark this is as immutable to make sure the connection is pointing at the same cluster in subsequent runs
          immutable: true
    interfaces:
      Install:
        operations:
          check: unfurl.configurators.k8s.ClusterConfigurator
          discover: unfurl.configurators.k8s.ClusterConfigurator

  unfurl.nodes.K8sRawResource:
    derived_from: tosca.nodes.Root
    requirements:
      - host:
          node: unfurl.nodes._K8sResourceHost
          relationship: tosca.relationships.HostedOn
          occurrences: [0, 1]
    properties:
      definition:
        type: any
        description: Inline resource definition (string or map)
        required: false
      src:
        type: string
        description: File path to resource definition
        required: false
        metadata:
          user_settable: false
    attributes:
      apiResource:
        type: map
        required: false
      name:
        type: string
        default:
          eval: .name
    interfaces:
      Standard:
        # requirements:
        #  - unfurl.relationships.ConnectsTo.K8sCluster
        operations:
          configure: unfurl.configurators.k8s.ResourceConfigurator
          delete: unfurl.configurators.k8s.ResourceConfigurator
      Install:
        # requirements:
        #  - unfurl.relationships.ConnectsTo.K8sCluster
        operations:
          check: unfurl.configurators.k8s.ResourceConfigurator
          discover: unfurl.configurators.k8s.ResourceConfigurator

  unfurl.nodes.K8sNamespace:
    derived_from: [unfurl.nodes._K8sResourceHost, unfurl.nodes.K8sRawResource]
    properties:
      name:
        type: string
        constraints:
          - pattern: "^[\\w-]+$"
        default: default
        metadata:
          # namespaces can't be renamed
          immutable: true

  unfurl.nodes.K8sResource:
    derived_from: unfurl.nodes.K8sRawResource
    requirements:
      - host:
          node: unfurl.nodes.K8sNamespace
          relationship: tosca.relationships.HostedOn
    properties:
      name:
        type: string
        default:
          eval: .name
    attributes:
      namespace:
        type: string
        default:
          eval:
            if:
              is_function_defined: kubernetes_current_namespace
            then:
              kubernetes_current_namespace:
            else:
              get_property: [HOST, name]

  unfurl.nodes.K8sSecretResource:
    derived_from: unfurl.nodes.K8sResource
    properties:
      definition:
        metadata:
          # hide because this is computed from the "type" and "data" properties
          user_settable: false
      type:
        type: string
        default: Opaque
      data:
        type: map
        required: false
        metadata:
          sensitive: true

capability_types:
  unfurl.capabilities.Endpoint.K8sCluster:
    derived_from: tosca.capabilities.Endpoint.Admin
    description: >
      Capability to connect to a K8sCluster.
    properties:
      protocol:
        type: string
        default: https

relationship_types:
  unfurl.relationships.ConnectsTo.K8sCluster:
    derived_from: tosca.relationships.ConnectsTo
    valid_target_types: [unfurl.capabilities.Endpoint.K8sCluster]
    properties:
      name:
        title: Cluster name
        type: string
        required: false
        metadata:
          env_vars:
            - KUBE_CTX_CLUSTER
        default: { get_env: KUBE_CTX_CLUSTER }
      KUBECONFIG:
        type: unfurl.datatypes.EnvVar
        description: >
          Path to an existing Kubernetes config file. If not provided, and no other connection
          options are provided, and the KUBECONFIG environment variable is not set, the default location will be used (~/.kube/config.json).
        default: { get_env: KUBECONFIG }
        required: false
        metadata:
          user_settable: false
      context:
        type: string
        description: >
          The name of a context found in the config file. If not set the current-context will be used.
        required: false
        metadata:
          env_vars:
            - KUBE_CTX
        default: { get_env: KUBE_CTX }
      cluster_ca_certificate:
        type: string
        title: CA certificate
        metadata:
          sensitive: true
          user_settable: true
          input_type: textarea
          env_vars:
            - KUBE_CLUSTER_CA_CERT_DATA
        description: >
          PEM-encoded root certificates bundle for TLS authentication
        default: { get_env: KUBE_CLUSTER_CA_CERT_DATA }
        required: false
      cluster_ca_certificate_file:
        type: string
        default:
          eval:
            if: .::cluster_ca_certificate
            then:
              eval:
                tempfile:
                  eval: .::cluster_ca_certificate
                suffix: .crt
            else: null
        required: false
      insecure:
        type: boolean
        description: >
          If true, the server's certificate will not be checked for validity. This will make your HTTPS connections insecure
        metadata:
          user_settable: true
          env_vars:
            - KUBE_INSECURE
        required: false
        default: { get_env: KUBE_INSECURE }
      token:
        type: unfurl.datatypes.EnvVar
        title: Authentication Token
        metadata:
          sensitive: true
          user_settable: true
          env_vars:
            - KUBE_TOKEN
        description: Token of your service account.
        required: false
        default: { get_env: KUBE_TOKEN }
      credential:
        description: >
          token_type is either "api_key" or "password" (default is "password")
          Its "keys" map can have the following values:
          "cert_file": Path to a cert file for the certificate authority
          "ca_cert": Path to a client certificate file for TLS
          "key_file": Path to a client key file for TLS
        type: tosca.datatypes.Credential
        required: false
        metadata:
          sensitive: true
          user_settable: false
      namespace:
        description: The default namespace scope to use
        required: false
        type: string
      api_server:
        title: Kubernetes Cluster API Base URL
        description: The address and port of the Kubernetes API server
        required: false
        type: string
        default:
          eval: .target::api_server
        metadata:
          user_settable: true
          env_vars:
            - KUBE_HOST
      protocol:
        type: string
        default: https
      as:
        description: Username to impersonate for the operation
        required: false
        type: string
        metadata:
          user_settable: false
      as-group:
        description: Groups to impersonate for the operation
        required: false
        type: list
        entry_schema:
          type: string
        metadata:
          user_settable: false
      expires_at:
        description: The timestamp when these credentials will expire and need to be regenerated.
        required: false
        type: timestamp
    interfaces:
      Install:
        check:
          implementation:
            className: unfurl.configurators.k8s.ConnectionConfigurator
