# Copyright (c) 2020 Adam Souzis
# SPDX-License-Identifier: MIT
tosca_definitions_version: tosca_simple_unfurl_1_0_0
metadata:
  template_name: Common artifacts for executing operations
  template_author: onecommons.org
  template_version: 1.0.0

repositories:
  asdf:
    # last version before go rewrite
    url: https://github.com/asdf-vm/asdf.git#v0.15.0

artifact_types:
  artifact.AsdfTool:
    derived_from: unfurl.artifacts.ShellExecutable
    properties:
      version:
        type: string
        default: latest
        required: false
    interfaces:
      defaults:
        # XXX get_dir only works on localhost
        implementation: Cmd
        inputs:
          cmd: |
            if ! [ -x "$(command -v asdf)" ]; then
              ASDF_REPO={{ "asdf" | get_dir }}
              export ASDF_DATA_DIR="${ASDF_DATA_DIR:-$ASDF_REPO}"
              source $ASDF_REPO/asdf.sh
            fi
            asdf plugin add {{SELF.file}}
            asdf {%if task.operation == 'delete' %}uninstall{%else%}install{%endif%} {{SELF.file}} {{SELF.version}}
            {%if task.operation != 'delete' %}asdf local {{SELF.file}} {{SELF.version}}{%endif%}
          # set cwd so .tool-versions is written to the project root
          cwd: '{{ "project" | get_dir }}'
          keeplines: true
          # asdf.sh requires bash
          shell: '{{ "bash" | which }}'
          resultTemplate:
            # update the current process' PATH so that the the tool is available right away
            to_env:
              ^PATH: '{{ lookup("env", "ASDF_DATA_DIR") }}/installs/{{ SELF.file}}/{{SELF.version}}/bin }}'
            update_os_environ: true
      Standard:
        configure:
        delete:

  artifact.PythonPackage:
    derived_from: tosca.artifacts.Root
    properties:
      version:
        type: string
        description: Full version specifier (e.g. "==1.0")
        default: ""
    interfaces:
      Install:
        check: unfurl.configurators.PythonPackageCheckConfigurator
      Standard:
        # don't create a new virtual environment, use current or system
        create:
          implementation: Cmd
          inputs:
            # XXX add version if specified
            cmd: "{%if lookup('env', 'VIRTUAL_ENV') %}pipenv --bare{% else %}{{ __python_executable }} -m pip{% endif %} install '{{SELF.file}}{{SELF.version}}'"
        delete:
          implementation: Cmd
          inputs:
            cmd: "{%if lookup('env', 'VIRTUAL_ENV') %}pipenv --bare{% else %}{{ __python_executable }} -m pip{% endif %} uninstall '{{SELF.file}}{{SELF.version}}'"

# https://docs.ansible.com/ansible/latest/collections_guide/index.html
# https://docs.ansible.com/ansible/latest/reference_appendices/config.html#collections-paths
  artifact.AnsibleCollection:
    derived_from: tosca.artifacts.Root
    properties:
      version:
        type: string
        required: false
    interfaces:
      Install:
        check:
          implementation:
            className: Cmd
          inputs:
            cmd: "{{__python_executable}} -m ansible.cli.galaxy collection list --format json {{SELF.file}}"
            done:
              success: True # command returns error if there are no collections at all so set success true regardless
            # check if output isn't not empty
            # XXX check version if specified, set to degraded if mismatch
            resultTemplate: |
                {%if returncode == 0 and stdout | from_json %}
                readyState: ok
                # {{ {'python': 'unfurl.configurators.ansible.reload_collections'} | eval }}
                {% else %}
                readyState: absent
                {% endif %}
      Standard:
        create:
          implementation:
            className: Cmd
          inputs:
            # XXX add version if specified
            cmd: "{{__python_executable}} -m ansible.cli.galaxy collection install {{SELF.file}}"
            resultTemplate:
              eval:
                python: unfurl.configurators.ansible.reload_collections

  # XXX update TerraformConfigurator to read from artifact
  # unfurl.artifacts.TerraformModule:
  #   derived_from: unfurl.artifacts.HasConfigurator
  #   interfaces:
  #     className:
  #       type: string
  #       default: unfurl.configurators.terraform.TerraformConfigurator

node_types:
  unfurl.nodes.Installer.Terraform:
    derived_from: unfurl.nodes.Installer
    properties:
      main:
        type: string
        required: false
        metadata:
          user_settable: false
    interfaces:
      defaults:
        implementation:
          className: unfurl.configurators.terraform.TerraformConfigurator
        inputs:
          main: { get_property: [SELF, main] }
      Standard:
        operations:
          delete:
      Install:
        operations:
          check:

topology_template:
  node_templates:
    configurator-artifacts:
      type: unfurl.nodes.LocalRepository
      directives:
        - default # we need this so that this node template is imported
      artifacts:
        terraform:
          type: artifact.AsdfTool
          file: terraform
          properties:
            version: 1.1.4

        gcloud:
          type: artifact.AsdfTool
          file: gcloud
          properties:
            version: 499.0.0

        kompose:
          type: artifact.AsdfTool
          file: kompose
          properties:
            version: "1.26.1"

        google-auth:
          type: artifact.PythonPackage
          file: google-auth

        octodns:
          type: artifact.PythonPackage
          file: octodns
          properties:
            version: "==0.9.14"

        kubernetes.core:
          type: artifact.AnsibleCollection
          file: kubernetes.core
          properties:
            version: "2.4.0"

        community.docker:
          type: artifact.AnsibleCollection
          file: community.docker
          properties:
            version: "3.12.1"

        ansible.utils:
          type: artifact.AnsibleCollection
          file: ansible.utils
          properties:
            version: "2.10.3"
