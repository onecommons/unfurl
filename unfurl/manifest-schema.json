{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ensemble.yaml",
  "definitions": {
    "state": {
      "title": "state",
      "description": "the `node state` of the instance",
      "type": "string",
      "enum": [
        "initial",
        "creating",
        "created",
        "configuring",
        "configured",
        "starting",
        "started",
        "stopping",
        "stopped",
        "deleting",
        "deleted",
        "error"
      ],
      "$$target": "#/definitions/state"
    },
    "readyState": {
      "title": "readyState",
      "description": "The operational status of the instance",
      "type": "string",
      "enum": [
        "unknown",
        "ok",
        "degraded",
        "error",
        "pending",
        "absent"
      ],
      "$$target": "#/definitions/readyState"
    },
    "atomic": {
      "title": "atomic",
      "description": "indicates these properties must be set all at once or replaced",
      "type": "object",
      "$$target": "#/definitions/atomic"
    },
    "namedObjects": {
      "title": "namedObject",
      "type": "object",
      "description": "constrains how properties are named",
      "propertyNames": {
        "pattern": "^[A-Za-z._][A-Za-z0-9._:\\-]*$"
      },
      "$$target": [
        "#/definitions/namedObjects",
        "./manifest-schema.json#/definitions/namedObjects"
      ],
      "default": {}
    },
    "attributes": {
      "title": "attributes",
      "$ref": "#/definitions/namedObjects",
      "type": "object",
      "default": {},
      "$$target": "#/definitions/attributes"
    },
    "schema": {
      "title": "schema",
      "description": "a JSON Schema definition",
      "type": "object",
      "$$target": "#/definitions/schema"
    },
    "environment": {
      "title": "environment",
      "$$target": [
        "#/definitions/environment",
        "./manifest-schema.json#/definitions/environment"
      ],
      "type": "object",
      "properties": {
        "inputs": {
          "$ref": "#/definitions/attributes"
        },
        "defaultProject": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "deployment_blueprint": {
          "type": "string"
        },
        "variables": {
          "anyOf": [
            {
              "type": "object"
            },
            {
              "type": "null"
            }
          ]
        },
        "locals": {
          "$ref": "#/definitions/attributes"
        },
        "secrets": {
          "$ref": "#/definitions/attributes"
        },
        "connections": {
          "anyOf": [
            {
              "$ref": "#/definitions/namedObjects"
            },
            {
              "type": "null"
            }
          ]
        },
        "instances": {
          "$ref": "#/definitions/namedObjects"
        },
        "repositories": {
          "type": "object",
          "description": ":ref:`TOSCA repositories<tosca_repositories>`"
        },
        "cloudmaps": {
          "type": "object",
          "properties": {
            "repositories": {
              "type": "object"
            },
            "hosts": {
              "type": "object"
            }
          }
        },
        "imports": {
          "type": "array"
        },
        "external": {
          "type": "object",
          "allOf": [
            {
              "$ref": "#/definitions/namedObjects"
            },
            {
              "additionalProperties": {
                "$ref": "#/definitions/external"
              }
            }
          ]
        },
        "lfs_lock": {
          "type": "object",
          "$$target": "#/definitions/environment/lfs_lock",
          "description": "Configure the global git lfs lock for jobs. See Job `locking`",
          "properties": {
            "lock": {
              "type": "string",
              "enum": [
                "no",
                "try",
                "require"
              ],
              "default": "no",
              "description": "Whether to use git lfs when locking an ensemble. 'try' use locking if lfs is available; 'require' means error if unable to lock"
            },
            "name": {
              "type": "string",
              "description": "Name of the lock file"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "Git LFS server url; if missing, use the ensemble's git repository"
            }
          }
        }
      }
    },
    "external": {
      "title": "External",
      "description": "Declare external instances imported from another manifest.",
      "$$target": "#/definitions/external",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "object",
          "properties": {
            "file": {
              "type": "string"
            },
            "repository": {
              "type": "string"
            },
            "project": {
              "type": "string"
            }
          }
        },
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "instance": {
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/attributes"
        },
        "version": {
          "$ref": "#/definitions/version",
          "description": "Imported template requires compatible version."
        },
        "connections": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of connection names to import."
        }
      },
      "additionalProperties": false
    },
    "instance": {
      "title": "Instance",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "template": {
              "anyOf": [
                {
                  "type": "object"
                },
                {
                  "type": "string"
                }
              ]
            },
            "attributes": {
              "$ref": "#/definitions/attributes",
              "default": {}
            },
            "properties": {
              "$ref": "#/definitions/attributes"
            },
            "instances": {
              "$ref": "#/definitions/instances"
            },
            "capabilities": {
              "$ref": "#/definitions/instances"
            },
            "requirements": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/instances"
              }
            },
            "imported": {
              "type": "string"
            }
          }
        },
        {
          "$ref": "#/definitions/status"
        }
      ],
      "$$target": "#/definitions/instance"
    },
    "instances": {
      "title": "instances",
      "$$target": "#/definitions/instances",
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/namedObjects"
        },
        {
          "additionalProperties": {
            "$ref": "#/definitions/instance"
          }
        }
      ]
    },
    "repositories": {
      "title": "repositories",
      "$$target": [
        "#/definitions/repositories",
        "./manifest-schema.json#/definitions/repositories"
      ],
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "repository URL"
        },
        "package_id": {
          "type": "string",
          "description": "set if repository is a package"
        },
        "name": {
          "type": "string",
          "description": "name repository (set if package_id is missing)"
        },
        "revision": {
          "type": "string",
          "description": "intended revision (branch or tag) declared by user"
        },
        "discovered_revision": {
          "type": "string",
          "description": "discovered version tag or (MISSING) if not found"
        },
        "commit": {
          "type": "string",
          "description": "current commit"
        },
        "branch": {
          "type": "string",
          "description": "current commit is on this branch"
        },
        "tag": {
          "type": "string",
          "description": "current commit is on this tag"
        },
        "initial": {
          "type": "string",
          "description": "initial commit"
        },
        "origin": {
          "type": "string",
          "description": "origin url"
        }
      }
    },
    "status": {
      "title": "Status",
      "$$target": "#/definitions/status",
      "type": "object",
      "properties": {
        "readyState": {
          "type": "object",
          "properties": {
            "effective": {
              "$ref": "#/definitions/readyState"
            },
            "local": {
              "$ref": "#/definitions/readyState"
            },
            "state": {
              "$ref": "#/definitions/state"
            }
          }
        },
        "priority": {
          "type": "string",
          "enum": [
            "ignore",
            "optional",
            "required",
            "critical"
          ]
        },
        "lastStateChange": {
          "$ref": "#/definitions/changeId"
        },
        "lastConfigChange": {
          "$ref": "#/definitions/changeId"
        },
        "protected": {
          "type": "boolean"
        },
        "created": {
          "anyOf": [
            {
              "$ref": "#/definitions/changeId"
            },
            {
              "type": "string"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "customized": {
          "anyOf": [
            {
              "$ref": "#/definitions/changeId"
            },
            {
              "type": "boolean"
            }
          ]
        }
      }
    },
    "changeId": {
      "title": "changeId",
      "type": "string",
      "pattern": "^A[A-Za-z0-9]{11}$",
      "$$target": "#/definitions/changeId"
    },
    "timestamp": {
      "title": "Timestamp",
      "$$target": "#/definitions/timestamp",
      "type": "string",
      "format": "date-time"
    },
    "version": {
      "title": "Generic Version Identifier",
      "$$target": [
        "#/definitions/version",
        "./manifest-schema.json#/definitions/version"
      ],
      "anyOf": [
        {
          "type": "string"
        },
        {
          "type": "number"
        }
      ]
    },
    "configurationSpec": {
      "title": "implementation definition",
      "type": "object",
      "properties": {
        "operation": {
          "type": "string"
        },
        "className": {
          "type": "string"
        },
        "majorVersion": {
          "$ref": "#/definitions/version"
        },
        "minorVersion": {
          "type": "string"
        }
      },
      "required": [
        "className"
      ],
      "$$target": "#/definitions/configurationSpec"
    },
    "changes": {
      "title": "Changes",
      "description": "change log entry",
      "$$target": [
        "#/definitions/changes",
        "./manifest-schema.json#/definitions/changes"
      ],
      "type": "array",
      "items": {
        "type": "object",
        "anyOf": [
          {
            "$ref": "#/definitions/job"
          },
          {
            "$ref": "#/definitions/task"
          }
        ]
      }
    },
    "job": {
      "title": "Job Record",
      "$$target": [
        "#/definitions/job",
        "./manifest-schema.json#/definitions/job"
      ],
      "type": "object",
      "allOf": [
        {
          "$ref": "#/definitions/status"
        },
        {
          "properties": {
            "changeId": {
              "$ref": "#/definitions/changeId"
            },
            "previousId": {
              "$ref": "#/definitions/changeId"
            },
            "startCommit": {
              "type": "string"
            },
            "startTime": {
              "$ref": "#/definitions/timestamp"
            },
            "endTime": {
              "$ref": "#/definitions/timestamp"
            },
            "workflow": {
              "type": "string"
            },
            "options": {
              "type": "object",
              "description": "job options set by the user"
            },
            "summary": {
              "type": "string"
            },
            "changed": {
              "type": "integer",
              "description": "number of tasks that made changes to the target"
            },
            "specDigest": {
              "type": "string"
            },
            "endCommit": {
              "type": "string"
            },
            "changelog": {
              "type": "string",
              "description": "path to the full job record"
            }
          }
        }
      ],
      "required": [
        "changeId"
      ]
    },
    "task": {
      "title": "Task Record",
      "$$target": "#/definitions/task",
      "type": "object",
      "allOf": [
        {
          "properties": {
            "changeId": {
              "$ref": "#/definitions/changeId"
            },
            "target": {
              "type": "string"
            },
            "startTime": {
              "$ref": "#/definitions/timestamp"
            },
            "endTime": {
              "$ref": "#/definitions/timestamp"
            },
            "implementation": {
              "$ref": "#/definitions/configurationSpec"
            },
            "reason": {
              "type": "string"
            },
            "inputs": {
              "$ref": "#/definitions/attributes"
            },
            "changes": {
              "allOf": [
                {
                  "additionalProperties": {
                    "$ref": "#/definitions/namedObjects"
                  }
                }
              ],
              "default": {}
            },
            "changed": {
              "type": "boolean",
              "description": "true if the task made changes to the target"
            },
            "dependencies": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  },
                  "ref": {
                    "type": "string"
                  },
                  "expected": {},
                  "schema": {
                    "$ref": "#/definitions/schema"
                  },
                  "required": {
                    "type": "boolean"
                  },
                  "writeOnly": {
                    "type": "boolean"
                  }
                }
              }
            },
            "messages": {
              "type": "array"
            },
            "result": {
              "oneOf": [
                {
                  "enum": [
                    "skipped"
                  ]
                },
                {
                  "type": "object"
                }
              ]
            }
          },
          "required": [
            "changeId"
          ]
        },
        {
          "$ref": "#/definitions/status"
        }
      ]
    },
    "lock": {
      "title": "Lock",
      "$$target": "#/definitions/lock",
      "description": "Lock Section",
      "type": "object",
      "properties": {
        "runtime": {
          "type": "object",
          "properties": {
            "unfurl": {
              "type": "object",
              "properties": {
                "version": {
                  "$ref": "#/definitions/version"
                },
                "digest": {
                  "type": "string"
                }
              }
            },
            "toolVersions": {
              "type": "object",
              "description": "asdf tools versions used"
            }
          }
        },
        "package_rules": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "package rules used"
        },
        "repositories": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/repositories"
          }
        },
        "ensembles": {
          "type": "object",
          "description": "the state of referenced external ensembles",
          "allOf": [
            {
              "$ref": "#/definitions/namedObjects"
            },
            {
              "additionalProperties": {
                "type": "object",
                "properties": {
                  "uri": {
                    "type": "string",
                    "format": "uri"
                  },
                  "changeId": {
                    "anyOf": [
                      {
                        "$ref": "#/definitions/changeId"
                      },
                      {
                        "type": "null"
                      }
                    ]
                  },
                  "digest": {
                    "type": "string"
                  },
                  "manifest": {
                    "type": "object",
                    "properties": {
                      "file": {
                        "type": "string"
                      },
                      "repository": {
                        "type": "string"
                      },
                      "project": {
                        "type": "string"
                      }
                    }
                  }
                }
              }
            }
          ]
        }
      }
    }
  },
  "type": "object",
  "properties": {
    "apiVersion": {
      "type": "string",
      "enum": [
        "unfurl/v1alpha1",
        "unfurl/v1.0.0"
      ]
    },
    "kind": {
      "type": "string",
      "enum": [
        "Manifest",
        "Ensemble"
      ]
    },
    "metadata": {
      "type": "object",
      "properties": {
        "uri": {
          "type": "string",
          "format": "uri"
        },
        "aliases": {
          "type": "array",
          "items": {
            "type": "string",
            "format": "uri"
          }
        }
      },
      "required": [
        "uri"
      ]
    },
    "environment": {
      "description": "Environment defaults",
      "$ref": "#/definitions/environment"
    },
    "spec": {
      "type": "object",
      "properties": {
        "service_template": {
          "description": "A TOSCA service template",
          "type": "object"
        },
        "inputs": {
          "$ref": "#/definitions/attributes"
        },
        "instances": {
          "$ref": "#/definitions/namedObjects"
        },
        "deployment_blueprints": {
          "$ref": "#/definitions/namedObjects"
        },
        "resource_templates": {
          "$ref": "#/definitions/namedObjects"
        },
        "discovered": {
          "description": "Discovered Node Templates",
          "$ref": "#/definitions/namedObjects"
        }
      }
    },
    "status": {
      "type": "object",
      "allOf": [
        {
          "properties": {
            "inputs": {
              "$ref": "#/definitions/attributes"
            },
            "outputs": {
              "$ref": "#/definitions/attributes"
            },
            "instances": {
              "$ref": "#/definitions/instances"
            }
          }
        },
        {
          "$ref": "#/definitions/status"
        }
      ],
      "default": {}
    },
    "lastJob": {
      "$ref": "#/definitions/job"
    },
    "jobsLog": {
      "type": "string"
    },
    "changes": {
      "description": "Optional list of changes. If missing, changes are saved as separate `files<job.yaml>`",
      "$ref": "#/definitions/changes"
    },
    "lock": {
      "$ref": "#/definitions/lock"
    }
  },
  "required": [
    "apiVersion",
    "kind",
    "spec"
  ]
}