# Generated by tosca.yaml2python from unfurl/configurators/templates/supervisor.yaml at 2025-02-08T13:03:59 overwrite not modified (change to "overwrite ok" to allow)

import unfurl
from typing import List, Dict, Any, Tuple, Union, Sequence
import tosca
from tosca import Capability, Eval, Node, operation
import unfurl.configurators.supervisor
import unfurl.configurators
import unfurl.configurators.shell


class unfurl_nodes_Supervisor(tosca.nodes.SoftwareComponent):
    _type_name = "unfurl.nodes.Supervisor"
    homeDir: str = Eval({"eval": {"get_dir": "local"}})
    confFile: str = "supervisord.conf"
    conf: str = r"""\
[supervisord]
pidfile=%(here)s/supervisord.pid
logfile=%(here)s/supervisord.log
loglevel=debug

[unix_http_server]
file=%(here)s/supervisor.sock   ; the path to the socket file
;chmod=0700                 ; socket file mode (default 0700)
;chown=nobody:nogroup       ; socket file uid:gid owner
;username=user              ; default is no username (open server)
;password=123               ; default is no password (open server)

[supervisorctl]
serverurl=unix:///%(here)s/supervisor.sock ; use a unix:// URL  for a unix socket

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[include]
files = programs/*.conf
"""

    host_capability: "tosca.capabilities.Compute" = Capability(
        name="host", factory=tosca.capabilities.Compute
    )

    def check(self, **kw: Any) -> Any:
        return unfurl.configurators.shell.ShellConfigurator(
            command=Eval(
                (
                    "test -f '{{ SELF.homeDir }}/supervisord.pid' && ps -p `cat '{{ SELF.homeDir "
                    "}}/supervisord.pid'`"
                )
            ),
            done={"success": True},
            resultTemplate=Eval(
                'readyState:\n  local: "{%if returncode == 0 %}ok{%else%}absent{%endif%}"\n'
            ),
        )

    def create(self, **kw: Any) -> Any:
        return unfurl.configurators.TemplateConfigurator(
            run=Eval(
                {
                    "eval": {
                        "file": "{{ SELF.homeDir }}/{{ SELF.confFile }}",
                        "contents": "{{ SELF.conf }}",
                    }
                }
            ),
        )

    def start(self, **kw: Any) -> Any:
        return unfurl.configurators.shell.ShellConfigurator(
            command=Eval("supervisord -c {{ SELF.homeDir }}/{{ SELF.confFile }}"),
        )

    def stop(self, **kw: Any) -> Any:
        return unfurl.configurators.shell.ShellConfigurator(
            command=Eval(
                "supervisorctl -c {{ SELF.homeDir }}/{{ SELF.confFile }} shutdown"
            ),
        )


class unfurl_nodes_ProcessController(tosca.nodes.Root):
    _type_name = "unfurl.nodes.ProcessController"


class unfurl_nodes_ProcessController_Supervisor(unfurl_nodes_ProcessController):
    _type_name = "unfurl.nodes.ProcessController.Supervisor"
    name: str
    program: Dict[str, Any]

    host: Union["tosca.relationships.HostedOn", "unfurl_nodes_Supervisor"]

    @operation(
        apply_to=[
            "Standard.configure",
            "Standard.start",
            "Standard.stop",
            "Standard.delete",
        ]
    )
    def default(self, **kw: Any) -> Any:
        return unfurl.configurators.supervisor.SupervisorConfigurator()


__all__ = [
    "unfurl_nodes_Supervisor",
    "unfurl_nodes_ProcessController",
    "unfurl_nodes_ProcessController_Supervisor",
]

