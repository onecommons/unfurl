# Generated by tosca.yaml2python from unfurl/configurators/templates/docker.yaml at 2025-02-08T13:03:59 overwrite not modified (change to "overwrite ok" to allow)

import unfurl
from typing import List, Dict, Any, Tuple, Union, Sequence
import tosca
from tosca import (
    DataEntity,
    Eval,
    Node,
    OpenDataEntity,
    Property,
    operation,
    valid_values,
)
import typing_extensions
import unfurl.configurators.ansible
from unfurl.tosca_plugins.artifacts import *


class unfurl_datatypes_DockerContainer(OpenDataEntity):
    _type_name = "unfurl.datatypes.DockerContainer"
    _type_metadata = {"additionalProperties": True}
    environment: Union["unfurl.datatypes.EnvironmentVariables", None] = Property(
        factory=lambda: (unfurl.datatypes.EnvironmentVariables())
    )
    container_name: Union[str, None] = None
    image: Union[str, None] = None
    command: Union[object, None] = None
    volumes: Union[List[str], None] = None
    ports: Union[List[str], None] = None
    """Ports to expose (format: 80:8080)"""

    user: Union[str, None] = None
    """User used to run the container process. format: <UID>[:<GID>]"""

    expose: Union[List[str], None] = None
    """Expose ports without publishing them to the host machine"""

    entrypoint: Union[List[str], None] = None
    privileged: Union[bool, None] = None
    pull_policy: Union[
        typing_extensions.Annotated[
            str, (valid_values(["always", "never", "missing", "build"]),)
        ],
        None,
    ] = None
    network_mode: Union[str, None] = None
    """Use the same values as the docker client --network parameter ("bridge", "host", "none")"""

    deploy: Union[Dict[str, Any], None] = None


class unfurl_nodes_Container_Application_Docker(tosca.nodes.Root):
    _type_name = "unfurl.nodes.Container.Application.Docker"
    name: str = Eval({"eval": {"or": [".::container.container_name", ".name"]}})
    """The name of the container"""

    container: Union["unfurl_datatypes_DockerContainer", None] = None
    container_image: str = Eval(
        {
            "eval": {
                "if": ".artifacts::image",
                "then": {"get_artifact": ["SELF", "image"]},
                "else": {"eval": {"container_image": {"eval": "container::image"}}},
            }
        }
    )
    registry_url: Union[str, None] = Eval(
        "{{ '.::.artifacts::image::.repository::url' | eval }}"
    )
    registry_user: Union[str, None] = Eval(
        "{{ '.::.artifacts::image::.repository::credential::user' | eval }}"
    )
    registry_password: Union[str, None] = Eval(
        "{{ '.::.artifacts::image::.repository::credential::token' | eval }}"
    )

    image: Union[tosca.artifacts.DeploymentImageContainerDocker, None] = None

    @operation(outputs={"container": None, "image_path": None})
    def check(self, **kw: Any) -> Any:
        return unfurl.configurators.ansible.AnsibleConfigurator(
            playbook=Eval(
                {
                    "eval": {
                        "template": r"""\
#jinja2: variable_start_string: '<%', variable_end_string: '%>'
{% filter from_yaml %}
{%if 'registry_user' | eval %}
- community.docker.docker_login:
     # https://docs.ansible.com/ansible/latest/modules/docker_login_module.html#docker-login-module
     # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_login.py
     username: "<% SELF.registry_user %>"
     password: "<% SELF.registry_password %>"
     registry_url: "<% SELF.registry_url %>"
{% endif %}
- set_fact:
    image_path: "<% SELF.container_image %>"
- community.docker.docker_container:
    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_container.py
    name: "<% SELF.name %>" # required
    image: "{{ image_path }}" # Repository path and tag
    state: "<%  inputs.state %>"
    {%if SELF.container is defined %}
    {%if SELF.container.pull_policy is defined %}
    pull: <% SELF.container.pull_policy == "always" %>
    {%endif%}
    # filter out env vars set to none
    env: <% SELF.container.environment | map_value | dict2items | rejectattr("value", "none") | list | items2dict | to_json %>
    # merge container dict after stripping out "container_name" and "environment" keys
    <<: <% SELF.container | map_value | dict2items | rejectattr("key", "equalto" , "container_name") | rejectattr("key", "equalto" , "environment") | rejectattr("key", "equalto" , "pull_policy") | list | items2dict | to_json %>
    {%endif%}
    <<: <% inputs.configuration | default({}) | map_value | to_json %>
    # XXX :
    # api_version: max(set(capabilities.versions) | set(host::versions))
{% endfilter %}
"""
                    }
                }
            ),
            resultTemplate=Eval(
                r"""\
{% set status = outputs.container.State.Status | d("") %}
{% set error = outputs.container.State.Error | d("") %}
readyState:
  state: {{ {'created': 'created', 'restarting': 'starting', '': 'initial',
            'running': 'started', 'removing': 'deleting',
            'paused': 'stopped',  'stopped': 'stopped', 'exited': 'deleted', 'dead': 'deleted'}[status] }}
  local: {%if error %}error
              {% elif status == 'exited' or status == 'dead' %}absent
              {% elif status == 'running' %}ok
              {%else%}pending{%endif%}
# attributes: # XXX
#   container_image.digest:  outputs.container.Image
#   e.g. sha256:a5ab4ab35b15731c675a531b85ec15c8dd50e36b22d96bcceeca37d016537c8e
"""
            ),
            playbookArgs=["--check", "--diff"],
            state="started",
            done={"modified": False},
        )

    @operation(outputs={"container": None, "image_path": None})
    def configure(self, **kw: Any) -> Any:
        return unfurl.configurators.ansible.AnsibleConfigurator(
            playbook=Eval(
                {
                    "eval": {
                        "template": r"""\
#jinja2: variable_start_string: '<%', variable_end_string: '%>'
{% filter from_yaml %}
{%if 'registry_user' | eval %}
- community.docker.docker_login:
     # https://docs.ansible.com/ansible/latest/modules/docker_login_module.html#docker-login-module
     # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_login.py
     username: "<% SELF.registry_user %>"
     password: "<% SELF.registry_password %>"
     registry_url: "<% SELF.registry_url %>"
{% endif %}
- set_fact:
    image_path: "<% SELF.container_image %>"
- community.docker.docker_container:
    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_container.py
    name: "<% SELF.name %>" # required
    image: "{{ image_path }}" # Repository path and tag
    state: "<%  inputs.state %>"
    {%if SELF.container is defined %}
    {%if SELF.container.pull_policy is defined %}
    pull: <% SELF.container.pull_policy == "always" %>
    {%endif%}
    # filter out env vars set to none
    env: <% SELF.container.environment | map_value | dict2items | rejectattr("value", "none") | list | items2dict | to_json %>
    # merge container dict after stripping out "container_name" and "environment" keys
    <<: <% SELF.container | map_value | dict2items | rejectattr("key", "equalto" , "container_name") | rejectattr("key", "equalto" , "environment") | rejectattr("key", "equalto" , "pull_policy") | list | items2dict | to_json %>
    {%endif%}
    <<: <% inputs.configuration | default({}) | map_value | to_json %>
    # XXX :
    # api_version: max(set(capabilities.versions) | set(host::versions))
{% endfilter %}
"""
                    }
                }
            ),
            resultTemplate=Eval(
                r"""\
{% set status = outputs.container.State.Status | d("") %}
{% set error = outputs.container.State.Error | d("") %}
readyState:
  state: {{ {'created': 'created', 'restarting': 'starting', '': 'initial',
            'running': 'started', 'removing': 'deleting',
            'paused': 'stopped',  'stopped': 'stopped', 'exited': 'deleted', 'dead': 'deleted'}[status] }}
  local: {%if error %}error
              {% elif status == 'exited' or status == 'dead' %}absent
              {% elif status == 'running' %}ok
              {%else%}pending{%endif%}
# attributes: # XXX
#   container_image.digest:  outputs.container.Image
#   e.g. sha256:a5ab4ab35b15731c675a531b85ec15c8dd50e36b22d96bcceeca37d016537c8e
"""
            ),
            state="started",
        )

    @operation(outputs={"container": None, "image_path": None})
    def start(self, **kw: Any) -> Any:
        return unfurl.configurators.ansible.AnsibleConfigurator(
            playbook=Eval(
                {
                    "eval": {
                        "template": r"""\
#jinja2: variable_start_string: '<%', variable_end_string: '%>'
{% filter from_yaml %}
{%if 'registry_user' | eval %}
- community.docker.docker_login:
     # https://docs.ansible.com/ansible/latest/modules/docker_login_module.html#docker-login-module
     # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_login.py
     username: "<% SELF.registry_user %>"
     password: "<% SELF.registry_password %>"
     registry_url: "<% SELF.registry_url %>"
{% endif %}
- set_fact:
    image_path: "<% SELF.container_image %>"
- community.docker.docker_container:
    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_container.py
    name: "<% SELF.name %>" # required
    image: "{{ image_path }}" # Repository path and tag
    state: "<%  inputs.state %>"
    {%if SELF.container is defined %}
    {%if SELF.container.pull_policy is defined %}
    pull: <% SELF.container.pull_policy == "always" %>
    {%endif%}
    # filter out env vars set to none
    env: <% SELF.container.environment | map_value | dict2items | rejectattr("value", "none") | list | items2dict | to_json %>
    # merge container dict after stripping out "container_name" and "environment" keys
    <<: <% SELF.container | map_value | dict2items | rejectattr("key", "equalto" , "container_name") | rejectattr("key", "equalto" , "environment") | rejectattr("key", "equalto" , "pull_policy") | list | items2dict | to_json %>
    {%endif%}
    <<: <% inputs.configuration | default({}) | map_value | to_json %>
    # XXX :
    # api_version: max(set(capabilities.versions) | set(host::versions))
{% endfilter %}
"""
                    }
                }
            ),
            resultTemplate=Eval(
                r"""\
{% set status = outputs.container.State.Status | d("") %}
{% set error = outputs.container.State.Error | d("") %}
readyState:
  state: {{ {'created': 'created', 'restarting': 'starting', '': 'initial',
            'running': 'started', 'removing': 'deleting',
            'paused': 'stopped',  'stopped': 'stopped', 'exited': 'deleted', 'dead': 'deleted'}[status] }}
  local: {%if error %}error
              {% elif status == 'exited' or status == 'dead' %}absent
              {% elif status == 'running' %}ok
              {%else%}pending{%endif%}
# attributes: # XXX
#   container_image.digest:  outputs.container.Image
#   e.g. sha256:a5ab4ab35b15731c675a531b85ec15c8dd50e36b22d96bcceeca37d016537c8e
"""
            ),
            state="started",
        )

    @operation(outputs={"container": None, "image_path": None})
    def stop(self, **kw: Any) -> Any:
        return unfurl.configurators.ansible.AnsibleConfigurator(
            playbook=Eval(
                {
                    "eval": {
                        "template": r"""\
#jinja2: variable_start_string: '<%', variable_end_string: '%>'
{% filter from_yaml %}
{%if 'registry_user' | eval %}
- community.docker.docker_login:
     # https://docs.ansible.com/ansible/latest/modules/docker_login_module.html#docker-login-module
     # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_login.py
     username: "<% SELF.registry_user %>"
     password: "<% SELF.registry_password %>"
     registry_url: "<% SELF.registry_url %>"
{% endif %}
- set_fact:
    image_path: "<% SELF.container_image %>"
- community.docker.docker_container:
    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_container.py
    name: "<% SELF.name %>" # required
    image: "{{ image_path }}" # Repository path and tag
    state: "<%  inputs.state %>"
    {%if SELF.container is defined %}
    {%if SELF.container.pull_policy is defined %}
    pull: <% SELF.container.pull_policy == "always" %>
    {%endif%}
    # filter out env vars set to none
    env: <% SELF.container.environment | map_value | dict2items | rejectattr("value", "none") | list | items2dict | to_json %>
    # merge container dict after stripping out "container_name" and "environment" keys
    <<: <% SELF.container | map_value | dict2items | rejectattr("key", "equalto" , "container_name") | rejectattr("key", "equalto" , "environment") | rejectattr("key", "equalto" , "pull_policy") | list | items2dict | to_json %>
    {%endif%}
    <<: <% inputs.configuration | default({}) | map_value | to_json %>
    # XXX :
    # api_version: max(set(capabilities.versions) | set(host::versions))
{% endfilter %}
"""
                    }
                }
            ),
            resultTemplate=Eval(
                r"""\
{% set status = outputs.container.State.Status | d("") %}
{% set error = outputs.container.State.Error | d("") %}
readyState:
  state: {{ {'created': 'created', 'restarting': 'starting', '': 'initial',
            'running': 'started', 'removing': 'deleting',
            'paused': 'stopped',  'stopped': 'stopped', 'exited': 'deleted', 'dead': 'deleted'}[status] }}
  local: {%if error %}error
              {% elif status == 'exited' or status == 'dead' %}absent
              {% elif status == 'running' %}ok
              {%else%}pending{%endif%}
# attributes: # XXX
#   container_image.digest:  outputs.container.Image
#   e.g. sha256:a5ab4ab35b15731c675a531b85ec15c8dd50e36b22d96bcceeca37d016537c8e
"""
            ),
            state="stopped",
        )

    @operation(outputs={"container": None, "image_path": None})
    def delete(self, **kw: Any) -> Any:
        return unfurl.configurators.ansible.AnsibleConfigurator(
            playbook=Eval(
                {
                    "eval": {
                        "template": r"""\
#jinja2: variable_start_string: '<%', variable_end_string: '%>'
{% filter from_yaml %}
{%if 'registry_user' | eval %}
- community.docker.docker_login:
     # https://docs.ansible.com/ansible/latest/modules/docker_login_module.html#docker-login-module
     # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_login.py
     username: "<% SELF.registry_user %>"
     password: "<% SELF.registry_password %>"
     registry_url: "<% SELF.registry_url %>"
{% endif %}
- set_fact:
    image_path: "<% SELF.container_image %>"
- community.docker.docker_container:
    # https://docs.ansible.com/ansible/latest/collections/community/docker/docker_container_module.html#ansible-collections-community-docker-docker-container-module
    # https://github.com/ansible/ansible/blob/stable-2.8/lib/ansible/modules/cloud/docker/docker_container.py
    name: "<% SELF.name %>" # required
    image: "{{ image_path }}" # Repository path and tag
    state: "<%  inputs.state %>"
    {%if SELF.container is defined %}
    {%if SELF.container.pull_policy is defined %}
    pull: <% SELF.container.pull_policy == "always" %>
    {%endif%}
    # filter out env vars set to none
    env: <% SELF.container.environment | map_value | dict2items | rejectattr("value", "none") | list | items2dict | to_json %>
    # merge container dict after stripping out "container_name" and "environment" keys
    <<: <% SELF.container | map_value | dict2items | rejectattr("key", "equalto" , "container_name") | rejectattr("key", "equalto" , "environment") | rejectattr("key", "equalto" , "pull_policy") | list | items2dict | to_json %>
    {%endif%}
    <<: <% inputs.configuration | default({}) | map_value | to_json %>
    # XXX :
    # api_version: max(set(capabilities.versions) | set(host::versions))
{% endfilter %}
"""
                    }
                }
            ),
            resultTemplate=Eval(
                r"""\
{% set status = outputs.container.State.Status | d("") %}
{% set error = outputs.container.State.Error | d("") %}
readyState:
  state: {{ {'created': 'created', 'restarting': 'starting', '': 'initial',
            'running': 'started', 'removing': 'deleting',
            'paused': 'stopped',  'stopped': 'stopped', 'exited': 'deleted', 'dead': 'deleted'}[status] }}
  local: {%if error %}error
              {% elif status == 'exited' or status == 'dead' %}absent
              {% elif status == 'running' %}ok
              {%else%}pending{%endif%}
# attributes: # XXX
#   container_image.digest:  outputs.container.Image
#   e.g. sha256:a5ab4ab35b15731c675a531b85ec15c8dd50e36b22d96bcceeca37d016537c8e
"""
            ),
            state="absent",
        )


__all__ = [
    "unfurl_datatypes_DockerContainer",
    "unfurl_nodes_Container_Application_Docker",
]

