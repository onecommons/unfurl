#jinja2: variable_start_string: '[%', variable_end_string: '%]'
## When "unfurl clone" is invoked this file will be used to generate a new local/unfurl.yaml
## Edit this to include instructions needed for required local configuration
## such as how to obtain the vault password needed to decrypt encrypted content in the repository.
## Any lines starting with ## will be excluded from the generated file.
## Delete this file from the repository to suppress the generation of local/unfurl.yaml.
##

apiVersion: [% api_version %]
kind: Project
# this file is including into unfurl.yaml but is listed in .gitignore
# so you can add configuration that you don't want committed to the repository,
# such as secrets, local settings, and local ensembles.
environments:
 defaults:
    # use "variables" to modify environment variables
    # keys are processed in order and a leader "+" and "-"
    # will copy or remove the variable from the environment
    # e.g.:
    # variables:
    #   -*:       # will remove all environment variables
    #   +HOME:    # will add HOME back
    #   FOO: bar  # set FOO
    variables: {}
    {%- if vaultid %}
    # The vault password will be set using the --var VAULT_PASSWORD option when cloning, e.g.
    # `unfurl clone --var VAULT_PASSWORD "<the passphrase>" ...
    # If omitted, it will be autogenerated and so won't be able to decrypt previously encrypted content in the repository.
    # Make sure to keep this password in a safe place as this file isn't committed to the repository.
    secrets:
      vault_secrets:
          +%: merge # directive to merge this with other "vault_secrets" (by default secrets will be replaced)
          [% vaultid %]: "${VAULT_PASSWORD|generate_new_vault_password}"
    # Note: The UNFURL_VAULT_[% vaultid | default("default") | upper %]_PASSWORD environment variable overrides this.
    {%- endif -%}
