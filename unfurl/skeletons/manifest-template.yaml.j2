#jinja2: variable_start_string: '[%', variable_end_string: '%]'
# This template is intended to be included in your ensemble.yaml manifest file
# (by default, found at ensemble/ensemble.yaml)
# Edit it to include any reusable components your ensemble needs.
apiVersion: [% api_version %]
spec:
  service_template:
    # Declare your TOSCA types and topology here.
    # This include allows you to also declare your TOSCA as Python code:
    +?include: service_template.py
    # It will be merged with the YAML TOSCA definitions defined here.

    {%- if std | default("") %}
    repositories:
      std:
        url: https://unfurl.cloud/onecommons/std.git
    {% else %}
    # uncomment if you want to use the Unfurl Cloud standard library
    # repositories:
    #  std:
    #    url: https://unfurl.cloud/onecommons/std.git
    {% endif %}

    topology_template:
      node_templates: {}
        # # this is an example of a minimal node template
        # # it is essentially defining an untyped node
        # minimalNode:
        #   type: unfurl.nodes.Generic
        #   properties:
        #     # Templates need to define the properties declared by its type.
        #     # but unfurl.nodes.Generic is defined to allow its templates to declare
        #     # arbitrary properties, like this one:
        #     name: foo
        #   requirements:
        #     # "dependency" is the base relationship type between nodes
        #     # use it if you want to set untyped dependencies between nodes
        #     - dependency: anotherNode
        #   interfaces:
        #     # you need to define these operations if they are missing from node's type definition
        #     # the operation is defined as a simple string, the implementation is executed as a shell command.
        #     # Jinja2 style templates expressions are supported.
        #     Standard:
        #       # to deploy a node you need to at least define a configure operation
        #       configure: echo "created and configured {{ SELF.name }}"
        #       # if you want to be able to undeploy this node, define a delete operation
        #       delete: echo "deleted {{ SELF.name }}"
        #     Install:
        #       # if you want to be able to check on the status of a deployed node,
        #       # define a check operation
        #       check: echo "{{ SELF.name }} ok"
